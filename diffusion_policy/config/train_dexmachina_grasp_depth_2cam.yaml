defaults:
  - _self_
  - task: dexmachina_grasp_depth_2cam

name: 'dexmachina'
_target_: diffusion_policy.workspace.dexmachina_grasp_workspace.DexmachinaDiffusionUnetWorkspace
cam1_name: front_256
cam2_name: torso_256
shape_meta: ${task.shape_meta}
task_name: ${task.name}
exp_name: "depth"

data_name: fairsc
rl_run: no-vel-bbox-wrist7_box_ctrljoint_B6072_ho16
home_dir: /checkpoint/siro/mandizhao/ # /home/mandi
state_keys:
- 'robot/dof_pos'
# - 'robot/kpt_pos'
# - 'object/part_pos'
# - 'object/part_quat'
# - 'task/kpt_dists'

camera_keys:
- imgs/${cam1_name}/depth
- imgs/${cam2_name}/depth

horizon: 16
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
past_action_visible: False
# keypoint_visible_rate: 1.0
obs_as_local_cond: False
obs_as_global_cond: True
pred_action_steps_only: False

policy:
  _target_: diffusion_policy.policy.diffusion_unet_image_policy.DiffusionUnetImagePolicy

  shape_meta: ${shape_meta}

  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddim.DDIMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    # beta_schedule is important
    # this is the best we found
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: epsilon # or sample

  obs_encoder:
    _target_: diffusion_policy.model.vision.multi_image_obs_encoder.MultiImageObsEncoder
    shape_meta: ${shape_meta}
    rgb_model:
      _target_: diffusion_policy.model.vision.model_getter.get_resnet
      name: resnet18
      weights: null
    resize_shape: null # [480, 200]
    crop_shape: null # [100, 100] # ch, cw 240x320 90%
    random_crop: False
    use_group_norm: True
    share_rgb_model: True
    imagenet_norm: False

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  # crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True

  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 128
  num_workers: 8
  shuffle: True
  pin_memory: True
  persistent_workers: True

val_dataloader:
  batch_size: 128
  num_workers: 8
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 5000
  gradient_accumulate_every: 1
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 200 # this should be more frequen that checkpoint_every!
  checkpoint_every: 200
  val_every: 100
  sample_every: 100
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0
  freeze_encoder: False

logging:
  project: devmachina
  resume: True
  mode: online
  name: ${now:%m.%d-%H.%M}_${name}_${task_name}_${exp_name} # ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}_${exp_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: dp

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
