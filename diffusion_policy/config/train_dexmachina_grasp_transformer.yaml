defaults:
  - _self_
  - task: dexmachina_grasp_depth

name: 'dexmachina'
_target_: diffusion_policy.workspace.dexmachina_grasp_workspace.DexmachinaDiffusionUnetWorkspace

shape_meta:
  # acceptable types: rgb, low_dim
  obs:
    imgs/front_256/rgb:
      shape: [3,256,256]
      type: rgb
    robot/dof_pos:
      shape: [46]
      type: low_dim
    robot/kpt_pos:
      shape: [18]
      type: low_dim
    object/part_pos:
      shape: [3]
      type: low_dim
    task/kpt_dists:
      shape: [6]
      type: low_dim

  action:
    shape: [23]

task_name: ${task.name}
exp_name: rgb

data_name: fairsc
rl_run: no-vel-bbox-wrist7_box_ctrljoint_B6072_ho16
home_dir: /checkpoint/siro/mandizhao/ # /home/mandi
state_keys:
- robot/dof_pos
camera_keys:
- imgs/front_256/rgb # debug

horizon: 16
n_obs_steps: 2
n_action_steps: 4
n_latency_steps: 0
past_action_visible: False
obs_as_cond: True
pred_action_steps_only: False

policy:
  _target_: diffusion_policy.policy.diffusion_transformer_hybrid_image_policy.DiffusionTransformerHybridImagePolicy

  shape_meta: ${shape_meta}

  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: True # required when predict_epsilon=False
    prediction_type: epsilon # or sample

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  crop_shape: [200, 200]
  obs_encoder_group_norm: True
  eval_fixed_crop: True

  n_layer: 8
  n_cond_layers: 0  # >0: use transformer encoder for cond, otherwise use MLP
  n_head: 4
  n_emb: 256
  p_drop_emb: 0.0
  p_drop_attn: 0.3
  causal_attn: True
  time_as_cond: True # if false, use BERT like encoder only arch, time as input
  obs_as_cond: ${obs_as_cond}

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 64
  num_workers: 8
  shuffle: True
  pin_memory: True
  persistent_workers: True

val_dataloader:
  batch_size: 128
  num_workers: 8
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 5000
  gradient_accumulate_every: 1
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 100 # this should be more frequen that checkpoint_every!
  checkpoint_every: 200
  val_every: 100
  sample_every: 50
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0
  freeze_encoder: False

# for wandb
logging:
  project: devmachina
  resume: True
  mode: online
  name: ${now:%m.%d-%H.%M}_${name}_${task_name}_${exp_name} # ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}_${exp_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: dp

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%m.%d-%H.%M}_${name}_${task_name}_${exp_name} # #data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${exp_name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${exp_name}_${task_name}

hydra:
  job:
    override_dirname: ${exp_name}
  run:
    dir: data/outputs/${now:%m.%d-%H.%M}_${name}_${task_name}_${exp_name}  # data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${exp_name}_${task_name}
  sweep:
    dir: data/outputs/${now:%m.%d-%H.%M}_${name}_${task_name}_${exp_name}  # data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${exp_name}_${task_name}
    subdir: ${hydra.job.num}
